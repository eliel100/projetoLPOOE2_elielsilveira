/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.mycompany.projetolpooe1_elielsilveira.view;

import com.mycompany.projetolpooe1_elielsilveira.model.Produto;
import com.mycompany.projetolpooe1_elielsilveira.model.dao.PersistenciaJPA;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author spiec
 */
public class g_produtos extends javax.swing.JDialog {

    /**
     * Creates new form g_produtos
     */
    private javax.swing.JTable tabelaProdutos;
private javax.swing.JScrollPane jScrollPane1;
    public g_produtos(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Visualizar = new javax.swing.JButton();
        Inserir = new javax.swing.JButton();
        editar = new javax.swing.JButton();
        remover = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        Visualizar.setText("Visualizar");
        Visualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VisualizarActionPerformed(evt);
            }
        });

        Inserir.setText("Inserir");
        Inserir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InserirActionPerformed(evt);
            }
        });

        editar.setText("Editar");
        editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarActionPerformed(evt);
            }
        });

        remover.setText("Remover");
        remover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Visualizar)
                .addGap(18, 18, 18)
                .addComponent(Inserir)
                .addGap(18, 18, 18)
                .addComponent(editar)
                .addGap(18, 18, 18)
                .addComponent(remover)
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Visualizar)
                    .addComponent(Inserir)
                    .addComponent(editar)
                    .addComponent(remover))
                .addContainerGap(198, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void VisualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VisualizarActionPerformed
                                                
    try {
        // Cria uma instância de PersistenciaJPA
        PersistenciaJPA persistencia = new PersistenciaJPA();
        // Busca todos os produtos
        List<Produto> produtos = persistencia.entity.createQuery("SELECT p FROM Produto p", Produto.class).getResultList();

        // Cria o modelo da tabela
        DefaultTableModel model = new DefaultTableModel(
            new Object [][] {},
            new String [] { "ID", "Nome", "Preço" }
        );

        // Adiciona cada produto ao modelo da tabela
        for (Produto produto : produtos) {
            model.addRow(new Object[]{produto.getId(), produto.getNome(), produto.getPreco()});
        }

        // Cria a tabela e o JScrollPane
        tabelaProdutos = new javax.swing.JTable(model);
        jScrollPane1 = new javax.swing.JScrollPane(tabelaProdutos);

        // Adiciona o JScrollPane ao layout
        javax.swing.GroupLayout layout = (javax.swing.GroupLayout) getContentPane().getLayout();
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Visualizar)
                .addGap(18, 18, 18)
                .addComponent(Inserir)
                .addGap(18, 18, 18)
                .addComponent(editar)
                .addGap(18, 18, 18)
                .addComponent(remover))
        );
        layout.setVerticalGroup(
            layout.createSequentialGroup()
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(Visualizar)
                .addComponent(Inserir)
                .addComponent(editar)
                .addComponent(remover))
        );

        pack(); // Ajusta o tamanho do JDialog após a adição da tabela
        
        System.out.println("Número de produtos encontrados: " + produtos.size());
    } catch (Exception e) {
        e.printStackTrace();
    }


    }//GEN-LAST:event_VisualizarActionPerformed

    private void editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarActionPerformed
         int selectedRow = tabelaProdutos.getSelectedRow();
    
    if (selectedRow >= 0) { // Verifica se alguma linha foi selecionada
        int produtoId = (int) tabelaProdutos.getValueAt(selectedRow, 0); // Obtém o ID do produto

        // Cria e exibe o diálogo de edição de produto
        EditarProdutoDialog dialog = new EditarProdutoDialog(this, produtoId);
        dialog.setVisible(true);

        atualizarTabela(); // Atualiza a tabela após a edição
    } else {
        JOptionPane.showMessageDialog(this, "Selecione um produto para editar.", "Aviso", JOptionPane.WARNING_MESSAGE);
    }
    }
    private void atualizarTabela() {
    try {
        PersistenciaJPA persistencia = new PersistenciaJPA();
        List<Produto> produtos = persistencia.entity.createQuery("SELECT p FROM Produto p", Produto.class).getResultList();

        DefaultTableModel model = (DefaultTableModel) tabelaProdutos.getModel();
        model.setRowCount(0); // Limpa a tabela antes de adicionar novos dados

        for (Produto produto : produtos) {
            model.addRow(new Object[]{produto.getId(), produto.getNome(), produto.getPreco()});
        }
    } catch (Exception e) {
        e.printStackTrace();
    }


    }//GEN-LAST:event_editarActionPerformed

    private void InserirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InserirActionPerformed
         InserirProdutoDialog dialog = new InserirProdutoDialog(this);
    dialog.setVisible(true);

    // Atualiza a tabela de clientes após o diálogo ser fechado
    }//GEN-LAST:event_InserirActionPerformed

    private void removerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerActionPerformed
        removerProduto();
    }//GEN-LAST:event_removerActionPerformed

    private void removerProduto() {
    int selectedRow = tabelaProdutos.getSelectedRow();
    
    if (selectedRow >= 0) { // Verifica se alguma linha foi selecionada
        int produtoId = (int) tabelaProdutos.getValueAt(selectedRow, 0); // Obtém o ID do produto

        try {
            PersistenciaJPA persistencia = new PersistenciaJPA();
            Produto produto = persistencia.entity.find(Produto.class, produtoId);
            
            if (produto != null) {
                persistencia.entity.getTransaction().begin();
                persistencia.entity.remove(produto);
                persistencia.entity.getTransaction().commit();
                atualizarTabelaProdutos(); // Atualiza a tabela para refletir a remoção
            } else {
                JOptionPane.showMessageDialog(this, "Produto não encontrado.", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    } else {
        JOptionPane.showMessageDialog(this, "Selecione um produto para remover.", "Aviso", JOptionPane.WARNING_MESSAGE);
    }
}

    private void atualizarTabelaProdutos() {
    try {
        PersistenciaJPA persistencia = new PersistenciaJPA();
        List<Produto> produtos = persistencia.entity.createQuery("SELECT p FROM Produto p", Produto.class).getResultList();

        DefaultTableModel model = (DefaultTableModel) tabelaProdutos.getModel();
        model.setRowCount(0); // Limpa a tabela antes de adicionar novos dados

        for (Produto produto : produtos) {
            model.addRow(new Object[]{produto.getId(), produto.getNome(), produto.getPreco()});
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
}

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(g_produtos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(g_produtos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(g_produtos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(g_produtos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                g_produtos dialog = new g_produtos(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Inserir;
    private javax.swing.JButton Visualizar;
    private javax.swing.JButton editar;
    private javax.swing.JButton remover;
    // End of variables declaration//GEN-END:variables
}
